{"version":3,"sources":["components/card.js","components/products.js","endpoints/index.js","components/cart.js","shop/nav.js","shop/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","data","addToCart","className","name","price","type","onClick","Products","useState","setData","loading","state","setState","useEffect","fetch","then","res","json","catch","role","map","item","key","id","Cart","items","removeItem","length","Nav","active","tab","onNavigationChange","href","selectedItems","Shop","removeFromCart","newItems","filter","prevState","navigationChange","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAeeA,EAbF,SAACC,GAAW,IACfC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,UACd,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcF,EAAKG,MACjC,wBAAID,UAAU,iCAAd,IAAgDF,EAAKI,OACrD,4BAAQC,KAAK,SAASH,UAAU,eAAeI,QAAS,WAAOL,EAAUD,KAAzE,kBCiCOO,EAtCE,SAACR,GAAW,IAAD,EACFS,mBAAS,IADP,mBACnBR,EADmB,KACbS,EADa,OAEAD,mBAAS,CAAEE,SAAS,IAFpB,mBAEnBC,EAFmB,KAEZC,EAFY,KAkB1B,OAdAC,qBAAU,WACRD,EAAS,CAAEF,SAAS,IACpBI,MCVoB,oEDWjBC,MAAK,SAACC,GACL,OAAOA,EAAIC,OAAOF,MAAK,SAACf,GACtBY,EAAS,CAAEF,SAAS,IACpBD,EAAQT,SAGXkB,OAAM,WACLN,EAAS,CAAEF,SAAS,SAEvB,IAGD,yBAAKR,UAAU,aACb,yBAAKA,UAAU,YACZS,EAAMD,SACL,yBAAKR,UAAU,eACb,yBAAKA,UAAU,8BAA8BiB,KAAK,UAChD,0BAAMjB,UAAU,WAAhB,gBAILF,EAAKoB,KAAI,SAACC,GACT,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAIvB,KAAMqB,EAAMpB,UAAWF,EAAME,kBEX9CuB,EArBF,SAACzB,GAAW,IACf0B,EAAsB1B,EAAtB0B,MAAOC,EAAe3B,EAAf2B,WACf,OACE,yBAAKxB,UAAU,cACVuB,EAAME,QACN,yBAAKzB,UAAU,wBAAwBiB,KAAK,SAA5C,6BAIDM,EAAML,KAAI,SAACC,GACV,OACC,yBAAKC,IAAKD,EAAKE,GAAIrB,UAAU,mBAAmBiB,KAAK,SACnD,uCAASE,EAAKlB,KAAd,aAAuBkB,EAAKjB,QAC5B,4BAAQC,KAAK,SAASH,UAAU,eAAeI,QAAS,WAAOoB,EAAWL,KAA1E,gBCMGO,EAnBH,SAAC7B,GACX,IAAM8B,EAAuB,YAAd9B,EAAM+B,IACrB,OACE,6BACE,wBAAI5B,UAAU,gBACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAS,mBAAc2B,GAAU,UAAYvB,QAAS,WAAQP,EAAMgC,mBAAmB,YAAcC,KAAK,KAA7G,YAEF,wBAAI9B,UAAU,YACZ,uBAAGA,UAAS,oBAAe2B,GAAU,UAAYvB,QAAS,WAAQP,EAAMgC,mBAAmB,SAAWC,KAAK,KAA3G,UAGJ,yBAAK9B,UAAU,kBACb,0BAAOA,UAAU,+BAAjB,aAA0DH,EAAMkC,kBCiCzDC,E,YA1Cb,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRoC,eAAiB,SAACT,GAAgB,IAE1BU,EADoB,EAAKzB,MAAvBsB,cACuBI,QAAO,SAAChB,GACrC,OAAOA,EAAKE,KAAOG,EAAWH,MAEhC,EAAKX,UAAS,SAAC0B,GAAD,MAAgB,CAC5BL,cAAeG,OAfA,EAmBnBnC,UAAY,SAACoB,GACX,EAAKT,UAAS,SAAC0B,GAAD,MAAgB,CAC5BL,cAAc,GAAD,mBAAMK,EAAUL,eAAhB,CAA+BZ,SArB7B,EAyBnBkB,iBAAmB,SAACT,GAClB,EAAKlB,SAAS,CACZkB,SAxBF,EAAKnB,MAAQ,CACXmB,IAAgB,UAChBG,cAAgB,IALD,E,sEA8BT,IAAD,EACwBO,KAAK7B,MAA5BmB,EADD,EACCA,IAAKG,EADN,EACMA,cACb,OACE,6BACE,kBAAC,EAAD,CAAKF,mBAAoBS,KAAKD,iBAAkBT,IAAKA,EAAKG,cAAeA,EAAcN,SAC9E,YAARG,GAAqB,kBAAC,EAAD,CAAU7B,UAAWuC,KAAKvC,YACvC,SAAR6B,GAAkB,kBAAC,EAAD,CAAML,MAAOQ,EAAeP,WAAYc,KAAKL,sB,GArCrDM,a,MCOJC,MARf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCKcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.b451a06a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  const { data, addToCart } = props;\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{data.name}</h5>\n        <h6 className=\"card-subtitle mb-2 text-muted\">${data.price}</h6>\n        <button type=\"button\" className=\"btn btn-link\" onClick={() => {addToCart(data)}}>Add to Cart</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","import React, { useState, useEffect } from 'react';\nimport Card from './card';\nimport { urlItems } from '../endpoints'\n\nconst Products = (props) => {\n  const [data, setData] = useState([]);\n  const [state, setState] = useState({ loading: false });\n\n  useEffect(() => {\n    setState({ loading: true })\n    fetch(urlItems)\n      .then((res) => {\n        return res.json().then((data) => {\n          setState({ loading: false })\n          setData(data)\n        })\n      })\n      .catch(() => {\n        setState({ loading: false })\n      })\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <div className=\"products\">\n        {state.loading && (\n          <div className=\"text-center\">\n            <div className=\"spinner-border text-warning\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        )}\n        {data.map((item) => {\n          return (\n            <Card key={item.id} data={item} addToCart={props.addToCart}/>\n          )\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Products;","export const urlItems = 'https://5d8e0901370f02001405c7c9.mockapi.io/api/v1/postblog/item'","import React from 'react';\n\nconst Cart = (props) => {\n  const { items, removeItem } = props;\n  return (\n    <div className=\"container\">\n       {!items.length && (\n         <div className=\"alert alert-secondary\" role=\"alert\">\n          No Selected Items in Cart\n         </div>\n       )}\n       {items.map((item) => {\n         return (\n          <div key={item.id} className=\"alert alert-info\" role=\"alert\">\n            <div>{`${item.name}-$${item.price}`}</div>\n            <button type=\"button\" className=\"btn btn-link\" onClick={() => {removeItem(item)}}>Remove</button>\n          </div>\n         )\n       })}\n    </div>\n  );\n};\n\nexport default Cart;","import React from 'react';\n\nconst Nav = (props) => {\n  const active = props.tab === 'PRODUCT';\n  return (\n    <div>\n      <ul className=\"nav nav-tabs\">\n        <li className=\"nav-item\">\n          <a className={`nav-link ${active && 'active'}`} onClick={() => { props.onNavigationChange('PRODUCT') }} href=\"#\">Product</a>\n        </li>\n        <li className=\"nav-item\">\n          <a className={`nav-link ${!active && 'active'}`} onClick={() => { props.onNavigationChange('CART') }} href=\"#\">Cart</a>\n        </li>\n      </ul>\n      <div className=\"selected-items\"> \n        <span  className=\"badge badge-pill badge-info\">Selected: {props.selectedItems}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Nav;","import React, { Component } from 'react';\nimport Products from '../components/products';\nimport Cart from '../components/cart';\nimport Nav from './nav'\n\nclass Shop extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tab           : 'PRODUCT',\n      selectedItems : []\n    }\n  }\n\n  removeFromCart = (removeItem) => {\n    const { selectedItems } = this.state;\n    const newItems = selectedItems.filter((item) => {\n      return item.id !== removeItem.id\n    })\n    this.setState((prevState) => ({\n      selectedItems: newItems\n    }))\n  }\n\n  addToCart = (item) => {\n    this.setState((prevState) => ({\n      selectedItems: [...prevState.selectedItems, item]\n    }))\n  }\n\n  navigationChange = (tab) => {\n    this.setState({\n      tab\n    })\n  }\n  render() {\n    const { tab, selectedItems } = this.state;\n    return (\n      <div>\n        <Nav onNavigationChange={this.navigationChange} tab={tab} selectedItems={selectedItems.length}/>\n        {tab === 'PRODUCT' && <Products addToCart={this.addToCart}/>}\n        {tab === 'CART' && <Cart items={selectedItems} removeItem={this.removeFromCart} />}\n      </div>\n    );\n  }\n}\n\nexport default Shop;","import React from 'react';\nimport Shop from './shop';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Shop />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}